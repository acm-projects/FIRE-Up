{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Defs, G, LinearGradient, Rect, Stop, Svg, Text } from \"react-native-svg\";\nimport AbstractChart from \"./AbstractChart\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar barWidth = 32;\n\nvar BarChart = function (_super) {\n  __extends(BarChart, _super);\n\n  function BarChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.getBarPercentage = function () {\n      var _a = _this.props.chartConfig.barPercentage,\n          barPercentage = _a === void 0 ? 1 : _a;\n      return barPercentage;\n    };\n\n    _this.renderBars = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight,\n          barRadius = _a.barRadius,\n          withCustomBarColorFromData = _a.withCustomBarColorFromData;\n\n      var baseHeight = _this.calcBaseHeight(data, height);\n\n      return data.map(function (x, i) {\n        var barHeight = _this.calcHeight(x, data, height);\n\n        var barWidth = 32 * _this.getBarPercentage();\n\n        return _jsx(Rect, {\n          x: paddingRight + i * (width - paddingRight) / data.length + barWidth / 2,\n          y: (barHeight > 0 ? baseHeight - barHeight : baseHeight) / 4 * 3 + paddingTop,\n          rx: barRadius,\n          width: barWidth,\n          height: Math.abs(barHeight) / 4 * 3,\n          fill: withCustomBarColorFromData ? \"url(#customColor_0_\" + i + \")\" : \"url(#fillShadowGradientFrom)\"\n        }, Math.random());\n      });\n    };\n\n    _this.renderBarTops = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight;\n\n      var baseHeight = _this.calcBaseHeight(data, height);\n\n      return data.map(function (x, i) {\n        var barHeight = _this.calcHeight(x, data, height);\n\n        var barWidth = 32 * _this.getBarPercentage();\n\n        return _jsx(Rect, {\n          x: paddingRight + i * (width - paddingRight) / data.length + barWidth / 2,\n          y: (baseHeight - barHeight) / 4 * 3 + paddingTop,\n          width: barWidth,\n          height: 2,\n          fill: _this.props.chartConfig.color(0.6)\n        }, Math.random());\n      });\n    };\n\n    _this.renderColors = function (_a) {\n      var data = _a.data,\n          flatColor = _a.flatColor;\n      return data.map(function (dataset, index) {\n        var _a, _b;\n\n        return _jsx(Defs, {\n          children: (_b = dataset.colors) === null || _b === void 0 ? void 0 : _b.map(function (color, colorIndex) {\n            var highOpacityColor = color(1.0);\n            var lowOpacityColor = color(0.1);\n            return _jsxs(LinearGradient, {\n              id: \"customColor_\" + index + \"_\" + colorIndex,\n              x1: 0,\n              y1: 0,\n              x2: 0,\n              y2: 1,\n              children: [_jsx(Stop, {\n                offset: \"0\",\n                stopColor: highOpacityColor,\n                stopOpacity: \"1\"\n              }), flatColor ? _jsx(Stop, {\n                offset: \"1\",\n                stopColor: highOpacityColor,\n                stopOpacity: \"1\"\n              }) : _jsx(Stop, {\n                offset: \"1\",\n                stopColor: lowOpacityColor,\n                stopOpacity: \"0\"\n              })]\n            }, index + \"_\" + colorIndex);\n          })\n        }, (_a = dataset.key) !== null && _a !== void 0 ? _a : index);\n      });\n    };\n\n    _this.renderValuesOnTopOfBars = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight;\n\n      var baseHeight = _this.calcBaseHeight(data, height);\n\n      var renderLabel = function renderLabel(value) {\n        if (_this.props.chartConfig.formatTopBarValue) {\n          return _this.props.chartConfig.formatTopBarValue(value);\n        } else {\n          return value;\n        }\n      };\n\n      return data.map(function (x, i) {\n        var barHeight = _this.calcHeight(x, data, height);\n\n        var barWidth = 32 * _this.getBarPercentage();\n\n        return _jsx(Text, {\n          x: paddingRight + i * (width - paddingRight) / data.length + barWidth / 1,\n          y: (baseHeight - barHeight) / 4 * 3 + paddingTop - 1,\n          fill: _this.props.chartConfig.color(0.6),\n          fontSize: \"12\",\n          textAnchor: \"middle\",\n          children: renderLabel(data[i])\n        }, Math.random());\n      });\n    };\n\n    return _this;\n  }\n\n  BarChart.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        width = _b.width,\n        height = _b.height,\n        data = _b.data,\n        _c = _b.style,\n        style = _c === void 0 ? {} : _c,\n        _d = _b.withHorizontalLabels,\n        withHorizontalLabels = _d === void 0 ? true : _d,\n        _e = _b.withVerticalLabels,\n        withVerticalLabels = _e === void 0 ? true : _e,\n        _f = _b.verticalLabelRotation,\n        verticalLabelRotation = _f === void 0 ? 0 : _f,\n        _g = _b.horizontalLabelRotation,\n        horizontalLabelRotation = _g === void 0 ? 0 : _g,\n        _h = _b.withInnerLines,\n        withInnerLines = _h === void 0 ? true : _h,\n        _j = _b.showBarTops,\n        showBarTops = _j === void 0 ? true : _j,\n        _k = _b.withCustomBarColorFromData,\n        withCustomBarColorFromData = _k === void 0 ? false : _k,\n        _l = _b.showValuesOnTopOfBars,\n        showValuesOnTopOfBars = _l === void 0 ? false : _l,\n        _m = _b.flatColor,\n        flatColor = _m === void 0 ? false : _m,\n        _o = _b.segments,\n        segments = _o === void 0 ? 4 : _o;\n    var _p = style.borderRadius,\n        borderRadius = _p === void 0 ? 0 : _p,\n        _q = style.paddingTop,\n        paddingTop = _q === void 0 ? 16 : _q,\n        _r = style.paddingRight,\n        paddingRight = _r === void 0 ? 64 : _r;\n    var config = {\n      width: width,\n      height: height,\n      verticalLabelRotation: verticalLabelRotation,\n      horizontalLabelRotation: horizontalLabelRotation,\n      barRadius: this.props.chartConfig && this.props.chartConfig.barRadius || 0,\n      decimalPlaces: (_a = this.props.chartConfig && this.props.chartConfig.decimalPlaces) !== null && _a !== void 0 ? _a : 2,\n      formatYLabel: this.props.chartConfig && this.props.chartConfig.formatYLabel || function (label) {\n        return label;\n      },\n      formatXLabel: this.props.chartConfig && this.props.chartConfig.formatXLabel || function (label) {\n        return label;\n      }\n    };\n    return _jsx(View, {\n      style: style,\n      children: _jsxs(Svg, {\n        height: height,\n        width: width,\n        children: [this.renderDefs(__assign(__assign({}, config), this.props.chartConfig)), this.renderColors(__assign(__assign({}, this.props.chartConfig), {\n          flatColor: flatColor,\n          data: this.props.data.datasets\n        })), _jsx(Rect, {\n          width: \"100%\",\n          height: height,\n          rx: borderRadius,\n          ry: borderRadius,\n          fill: \"url(#backgroundGradient)\"\n        }), _jsx(G, {\n          children: withInnerLines ? this.renderHorizontalLines(__assign(__assign({}, config), {\n            count: segments,\n            paddingTop: paddingTop\n          })) : null\n        }), _jsx(G, {\n          children: withHorizontalLabels ? this.renderHorizontalLabels(__assign(__assign({}, config), {\n            count: segments,\n            data: data.datasets[0].data,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight\n          })) : null\n        }), _jsx(G, {\n          children: withVerticalLabels ? this.renderVerticalLabels(__assign(__assign({}, config), {\n            labels: data.labels,\n            paddingRight: paddingRight,\n            paddingTop: paddingTop,\n            horizontalOffset: barWidth * this.getBarPercentage()\n          })) : null\n        }), _jsx(G, {\n          children: this.renderBars(__assign(__assign({}, config), {\n            data: data.datasets[0].data,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight,\n            withCustomBarColorFromData: withCustomBarColorFromData\n          }))\n        }), _jsx(G, {\n          children: showValuesOnTopOfBars && this.renderValuesOnTopOfBars(__assign(__assign({}, config), {\n            data: data.datasets[0].data,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight\n          }))\n        }), _jsx(G, {\n          children: showBarTops && this.renderBarTops(__assign(__assign({}, config), {\n            data: data.datasets[0].data,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight\n          }))\n        })]\n      })\n    });\n  };\n\n  return BarChart;\n}(AbstractChart);\n\nexport default BarChart;","map":{"version":3,"sources":["../src/BarChart.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\nimport {\n  Defs,\n  G,\n  LinearGradient,\n  Rect,\n  Stop,\n  Svg,\n  Text\n} from \"react-native-svg\";\n\nimport AbstractChart, {\n  AbstractChartConfig,\n  AbstractChartProps\n} from \"./AbstractChart\";\nimport { ChartData } from \"./HelperTypes\";\n\nconst barWidth = 32;\n\nexport interface BarChartProps extends AbstractChartProps {\n  data: ChartData;\n  width: number;\n  height: number;\n  fromZero?: boolean;\n  withInnerLines?: boolean;\n  yAxisLabel: string;\n  yAxisSuffix: string;\n  chartConfig: AbstractChartConfig;\n  style?: Partial<ViewStyle>;\n  horizontalLabelRotation?: number;\n  verticalLabelRotation?: number;\n  /**\n   * Show vertical labels - default: True.\n   */\n  withVerticalLabels?: boolean;\n  /**\n   * Show horizontal labels - default: True.\n   */\n  withHorizontalLabels?: boolean;\n  /**\n   * The number of horizontal lines\n   */\n  segments?: number;\n  showBarTops?: boolean;\n  showValuesOnTopOfBars?: boolean;\n  withCustomBarColorFromData?: boolean;\n  flatColor?: boolean;\n  \n}\n\ntype BarChartState = {};\n\nclass BarChart extends AbstractChart<BarChartProps, BarChartState> {\n  getBarPercentage = () => {\n    const { barPercentage = 1 } = this.props.chartConfig;\n    return barPercentage;\n  };\n\n  renderBars = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    barRadius,\n    withCustomBarColorFromData\n  }: Pick<\n    Omit<AbstractChartConfig, \"data\">,\n    \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\" | \"barRadius\"\n  > & {\n    data: number[];\n    withCustomBarColorFromData: boolean;\n  }) => {\n    const baseHeight = this.calcBaseHeight(data, height);\n\n    return data.map((x, i) => {\n      const barHeight = this.calcHeight(x, data, height);\n      const barWidth = 32 * this.getBarPercentage();\n      return (\n        <Rect\n          key={Math.random()}\n          x={\n            paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 2\n          }\n          y={\n            ((barHeight > 0 ? baseHeight - barHeight : baseHeight) / 4) * 3 +\n            paddingTop\n          }\n          rx={barRadius}\n          width={barWidth}\n          height={(Math.abs(barHeight) / 4) * 3}\n          fill={\n            withCustomBarColorFromData\n              ? `url(#customColor_0_${i})`\n              : \"url(#fillShadowGradientFrom)\"\n          }\n        />\n      );\n    });\n  };\n\n  renderBarTops = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight\n  }: Pick<\n    Omit<AbstractChartConfig, \"data\">,\n    \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    data: number[];\n  }) => {\n    const baseHeight = this.calcBaseHeight(data, height);\n\n    return data.map((x, i) => {\n      const barHeight = this.calcHeight(x, data, height);\n      const barWidth = 32 * this.getBarPercentage();\n      return (\n        <Rect\n          key={Math.random()}\n          x={\n            paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 2\n          }\n          y={((baseHeight - barHeight) / 4) * 3 + paddingTop}\n          width={barWidth}\n          height={2}\n          fill={this.props.chartConfig.color(0.6)}\n        />\n      );\n    });\n  };\n\n  renderColors = ({\n    data,\n    flatColor\n  }: Pick<AbstractChartConfig, \"data\"> & {\n    flatColor: boolean;\n  }) => {\n    return data.map((dataset, index) => (\n      <Defs key={dataset.key ?? index}>\n        {dataset.colors?.map((color, colorIndex) => {\n          const highOpacityColor = color(1.0);\n          const lowOpacityColor = color(0.1);\n\n          return (\n            <LinearGradient\n              id={`customColor_${index}_${colorIndex}`}\n              key={`${index}_${colorIndex}`}\n              x1={0}\n              y1={0}\n              x2={0}\n              y2={1}\n            >\n              <Stop offset=\"0\" stopColor={highOpacityColor} stopOpacity=\"1\" />\n              {flatColor ? (\n                <Stop offset=\"1\" stopColor={highOpacityColor} stopOpacity=\"1\" />\n              ) : (\n                  <Stop offset=\"1\" stopColor={lowOpacityColor} stopOpacity=\"0\" />\n                )}\n            </LinearGradient>\n          );\n        })}\n      </Defs>\n    ));\n  };\n\n  renderValuesOnTopOfBars = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight\n  }: Pick<\n    Omit<AbstractChartConfig, \"data\">,\n    \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    data: number[];\n  }) => {\n    const baseHeight = this.calcBaseHeight(data, height);\n\n    const renderLabel = (value: number) => {\n      if(this.props.chartConfig.formatTopBarValue) {\n        return this.props.chartConfig.formatTopBarValue(value)\n      }\n      else {\n        return value\n      }\n    }\n    return data.map((x, i) => {\n      const barHeight = this.calcHeight(x, data, height);\n      const barWidth = 32 * this.getBarPercentage();\n      return (\n        <Text\n          key={Math.random()}\n          x={\n            paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 1\n            \n          }\n          y={((baseHeight - barHeight) / 4) * 3 + paddingTop - 1}\n          fill={this.props.chartConfig.color(0.6)}\n          fontSize=\"12\"\n          textAnchor=\"middle\"\n        >\n          {renderLabel(data[i])}\n        </Text>\n      );\n    });\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      data,\n      style = {},\n      withHorizontalLabels = true,\n      withVerticalLabels = true,\n      verticalLabelRotation = 0,\n      horizontalLabelRotation = 0,\n      withInnerLines = true,\n      showBarTops = true,\n      withCustomBarColorFromData = false,\n      showValuesOnTopOfBars = false,\n      flatColor = false,\n      segments = 4\n    } = this.props;\n\n    const { borderRadius = 0, paddingTop = 16, paddingRight = 64 } = style;\n\n    const config = {\n      width,\n      height,\n      verticalLabelRotation,\n      horizontalLabelRotation,\n      barRadius:\n        (this.props.chartConfig && this.props.chartConfig.barRadius) || 0,\n      decimalPlaces:\n        (this.props.chartConfig && this.props.chartConfig.decimalPlaces) ?? 2,\n      formatYLabel:\n        (this.props.chartConfig && this.props.chartConfig.formatYLabel) ||\n        function (label) {\n          return label;\n        },\n      formatXLabel:\n        (this.props.chartConfig && this.props.chartConfig.formatXLabel) ||\n        function (label) {\n          return label;\n        }\n    };\n\n    return (\n      <View style={style}>\n        <Svg height={height} width={width}>\n          {this.renderDefs({\n            ...config,\n            ...this.props.chartConfig\n          })}\n          {this.renderColors({\n            ...this.props.chartConfig,\n            flatColor: flatColor,\n            data: this.props.data.datasets\n          })}\n          <Rect\n            width=\"100%\"\n            height={height}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill=\"url(#backgroundGradient)\"\n          />\n          <G>\n            {withInnerLines\n              ? this.renderHorizontalLines({\n                ...config,\n                count: segments,\n                paddingTop\n              })\n              : null}\n          </G>\n          <G>\n            {withHorizontalLabels\n              ? this.renderHorizontalLabels({\n                ...config,\n                count: segments,\n                data: data.datasets[0].data,\n                paddingTop: paddingTop as number,\n                paddingRight: paddingRight as number\n              })\n              : null}\n          </G>\n          <G>\n            {withVerticalLabels\n              ? this.renderVerticalLabels({\n                ...config,\n                labels: data.labels,\n                paddingRight: paddingRight as number,\n                paddingTop: paddingTop as number,\n                horizontalOffset: barWidth * this.getBarPercentage()\n              })\n              : null}\n          </G>\n          <G>\n            {this.renderBars({\n              ...config,\n              data: data.datasets[0].data,\n              paddingTop: paddingTop as number,\n              paddingRight: paddingRight as number,\n              withCustomBarColorFromData: withCustomBarColorFromData\n            })}\n          </G>\n          <G>\n            {showValuesOnTopOfBars &&\n              this.renderValuesOnTopOfBars({\n                ...config,\n                data: data.datasets[0].data,\n                paddingTop: paddingTop as number,\n                paddingRight: paddingRight as number\n              })}\n          </G>\n          <G>\n            {showBarTops &&\n              this.renderBarTops({\n                ...config,\n                data: data.datasets[0].data,\n                paddingTop: paddingTop as number,\n                paddingRight: paddingRight as number\n              })}\n          </G>\n        </Svg>\n      </View>\n    );\n  }\n}\n\nexport default BarChart;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}